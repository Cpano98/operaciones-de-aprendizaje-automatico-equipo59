name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black isort mypy

    - name: Run flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Check code formatting with black
      run: |
        black --check --diff .
      continue-on-error: true

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
      continue-on-error: true

    - name: Run pylint
      run: |
        # Create .pylintrc if it doesn't exist
        if [ ! -f .pylintrc ]; then
          echo "[MESSAGES CONTROL]" > .pylintrc
          echo "disable=C0111,C0103,R0913,R0914,W0212" >> .pylintrc
        fi
        find . -type f -name "*.py" ! -path "./venv/*" ! -path "./.venv/*" -exec pylint {} + || true
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f screen
      continue-on-error: true

    - name: Check dependencies for vulnerabilities
      run: |
        # Create a requirements.txt for safety check
        pip freeze > requirements-check.txt
        safety check --file requirements-check.txt || true
      continue-on-error: true

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 30

